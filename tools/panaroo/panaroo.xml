<tool id="panaroo" name="Panaroo" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.02" license="MIT">
    <description>Generate accurate pangenomes by identifying, grouping, and analyzing core and accessory genes from GFF3 files across multiple genomes.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <edam_topics>
        <edam_topic>topic_3945</edam_topic> <!-- "Molecular evolution " -->
        <edam_topic>topic_0084</edam_topic> <!-- "Phylogeny" -->
        <edam_topic>topic_3053</edam_topic> <!-- "Genetics" -->
    </edam_topics>
    <edam_operations>
        <edam_operation>operation_3432</edam_operation> <!-- "Gene clustering" -->
        <edam_operation>operation_2424</edam_operation> <!-- "Genome comparison" -->
        <edam_operation>operation_0337</edam_operation> <!-- "Visualisation" -->
    </edam_operations>
    <xrefs>
        <xref type="bio.tools">Panaroo</xref>
    </xrefs>
    
    <command detect_errors="exit_code"><![CDATA[
        ## Create the 'out' directory if it doesn't exist
        mkdir -p out &&
        ## Create a symbolic link to the input GFF file(s) and name it 'input.gff'
        ln -s '$input1' input.gff

        panaroo
            -i input.gff
            -o out
            --clean-mode '$modes.clean_mode'

            #if $remove_invalid_genes:
                $modes.remove_invalid_genes
            #end if
            #if $threshold:
                --threshold '$matching.threshold' 
            #end if
            #if $family_threshold:
                --family_threshold '$matching.family_threshold'
            #end if
            #if $len_dif_percent:
                --len_dif_percent '$matching.len_dif_percent'
            #end if
            #if $merge_paralogs:
                $matching.merge_paralogs
            #end if
            #if $search_radius:
                --search_radius '$refind.search_radius'
            #end if
            #if $refind_prop_match:
                --refind_prop_match '$refind.refind_prop_match'
            #end if
            #if $refind_mode:
                --refind-mode '$refind.refind_mode'
            #end if
            #if $alignment:
                -a '$gene_alignment.alignment'
            #end if
            #if $aligner:
                --aligner '$gene_alignment.aligner'
            #end if
    ]]></command>
    
    <inputs>
        <param type="data" name="input1" format="gff,gff3" multiple="true" label="Select gff inputs to Panaroo" help="Select the files you wish to analyze with Panaroo, must be in gff3 format."/>
        <!--MODES-->
        <section name="modes" title="Modes"  expanded="false">
            <param argument="--clean-mode" type="select" label="filtering mode" help="Change a number of defaults to either favour strict, moderate or sensitive filtering">
                <option value="strict" selected="True">Strict</option>
                <option value="moderate">Moderate</option>
                <option value="sensitive ">Sensitive</option>
            </param>
            <param name="remove_invalid_genes" type="boolean" optional="true" truevalue="--remove-invalid-genes" falsevalue="" label="Remove Invalid Genes" help="Removes annotations that do not conform to the expected Prokka format. Disabled by default."/>
        </section>
        <!--Matching-->
        <section name="matching" title="Matching"  expanded="false">
            <param argument="--threshold" type="float" optional="true" value="0.98" label="Initial Clustering Threshold" help="Set the threshold for gene clustering. Default is 0.98."/>
            <param argument="--family_threshold" type="float" optional="true" value="0.7" label="Family Sequence Identity Level" help="Set the level at which Panaroo collapses genes into putative families. Default is 0.7."/>
            <param argument="--len_dif_percent" type="float" optional="true" value="0.98" label="Length Difference Percent" help="Set the length difference percent for initial gene clustering. Default is 0.98."/>
            <param name="merge_paralogs" type="boolean" optional="true" truevalue="--merge_paralogs" falsevalue="" label="Merge Paralogs" help="Merging paralogs can be enabled. Disabled by default."/>
        </section>
        <!--Refind-->
        <section name="refind" title="Refind"  expanded="false">
            <param argument="--search_radius" type="integer" optional="true" value="5000" label="Refinding Search Radius" help="Set radius for the search in nucleotides for refinding genes. Default is 5000."/>
            <param argument="--refind_prop_match" type="float" optional="true" value="0.5" label="Refinding Proportion Match" help="Set the proportion of the missing gene to consider as a match for refinding. Default is 0.5."/>
            <param argument="--refind-mode" type="select" optional="true" label="Refind Mode" help="Set the stringency mode at which to re-find genes.">
                <option value="default" selected="True">Default</option>
                <option value="strict">Strict</option>
                <option value="off ">Off</option>
            </param>
        </section>
        <!--GRAPH CORRECTION -->

        <!--Gene Alignment-->
        <section name="gene_alignment" title="Gene Alignment"  expanded="false">
            <param name="alignment" type="select" optional="true" label="Alignment" help="Run MSA either for the core genome or for every gene cluster.">
                <option value="core" selected="True">Core genome alignment</option>
                <option value="pan">Pan-genome alignment</option>
            </param>
            <param argument="--aligner" type="select" optional="true" label="Alignment method" help="Choose an aligner from either PRANK, Clustal or the default, MAFFT.">
                <option value="mafft" selected="True">MAFFT</option>
                <option value="clustal">Clustal</option>
                <option value="prank">PRANK</option>
                <option value="none">None</option>
            </param>
        </section>
    </inputs>

    <outputs>
        <data format="csv" name="gene_p_a" label="${tool.name} on ${on_string} Gene Presence Absence" from_work_dir="out/gene_presence_absence.csv"/>
        <data format="fasta" name="core_gene_aln" label="${tool.name} on ${on_string} Core Gene Alignment" from_work_dir="out/core_gene_alignment.aln"/>
    </outputs>

    <tests>
        <!-- Hint: You can use [ctrl+alt+t] after defining the inputs/outputs to auto-scaffold some basic test cases. -->
        <test expect_num_outputs="2">
            <param name="input1" value="ex1.gff ex2.gff" ftype="gff3"/>
            <param name="clean_mode" value="strict"/>
            <output name="gene_p_a" file="out/gene_p_a.csv" ftype="csv"/>
            <output name="core_gene_aln" file="out/core_gene_alignment.aln" ftype="fasta"/>
        </test> 
        <test expect_num_outputs="2">
            <param name="input1" value="ex1.gff,ex2.gff" ftype="gff3"/>
            <param name="clean_mode" value="moderate"/>
            <output name="gene_p_a" file="out/gene_p_a.csv" ftype="csv"/>
            <output name="core_gene_aln" file="out/core_gene_alignment.aln" ftype="fasta"/>
        </test>
        <test expect_num_outputs="2">
            <param name="input1" value="ex1.gff ex2.gff" ftype="gff3"/>
            <param name="clean_mode" value="strict"/>
            <param name="remove_invalid_genes" value="true"/>
            <param name="alignment" value="core"/>
            <param name="aligner" value="mafft"/>
            <output name="gene_p_a" file="out/gene_p_a.csv" ftype="csv"/>
            <output name="core_gene_aln" file="out/core_gene_alignment.aln" ftype="fasta"/>
        </test>
        <test expect_num_outputs="2">
            <param name="input1" value="ex1.gff,ex2.gff" ftype="gff3"/>
            <param name="clean_mode" value="strict"/>
            <param name="remove_invalid_genes" value="true"/>
            <param name="alignment" value="core"/>
            <param name="aligner" value="mafft"/>
            <output name="gene_p_a" file="out/gene_p_a.csv" ftype="csv"/>
            <output name="core_gene_aln" file="out/core_gene_alignment.aln" ftype="fasta"/>
        </test>
    </tests>
    <help><![CDATA[

**Panaroo**

Panaroo is a pangenome analysis tool specifically designed to analyze bacterial genomes. Its main goal is to create accurate pangenomes by identifying and grouping genes that are shared or unique across multiple genomes within a species. Panaroo is built to overcome some of the challenges in pangenome analysis, especially issues with paralogs (genes that arise by duplication within the same genome) and annotation inconsistencies between different genome assemblies.

    ]]></help>
    <citations>
        <citation type="doi">10.1186/s13059-020-02090-4</citation>
    </citations>
</tool>